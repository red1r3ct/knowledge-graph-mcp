// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	connection "github.com/red1r3ct/knowledge-graph-mcp/internal/connection"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockStorage) Create(ctx context.Context, req connection.CreateConnectionRequest) (*connection.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req)
	ret0, _ := ret[0].(*connection.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockStorageMockRecorder) Create(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStorage)(nil).Create), ctx, req)
}

// Delete mocks base method.
func (m *MockStorage) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStorageMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorage)(nil).Delete), ctx, id)
}

// FindConnectionPaths mocks base method.
func (m *MockStorage) FindConnectionPaths(ctx context.Context, fromNoteID, toNoteID int64, maxDepth int) ([]connection.ConnectionPath, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindConnectionPaths", ctx, fromNoteID, toNoteID, maxDepth)
	ret0, _ := ret[0].([]connection.ConnectionPath)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindConnectionPaths indicates an expected call of FindConnectionPaths.
func (mr *MockStorageMockRecorder) FindConnectionPaths(ctx, fromNoteID, toNoteID, maxDepth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindConnectionPaths", reflect.TypeOf((*MockStorage)(nil).FindConnectionPaths), ctx, fromNoteID, toNoteID, maxDepth)
}

// Get mocks base method.
func (m *MockStorage) Get(ctx context.Context, id int64) (*connection.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*connection.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorage)(nil).Get), ctx, id)
}

// GetBidirectionalConnections mocks base method.
func (m *MockStorage) GetBidirectionalConnections(ctx context.Context, noteID int64) (*connection.NoteConnectionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBidirectionalConnections", ctx, noteID)
	ret0, _ := ret[0].(*connection.NoteConnectionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBidirectionalConnections indicates an expected call of GetBidirectionalConnections.
func (mr *MockStorageMockRecorder) GetBidirectionalConnections(ctx, noteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBidirectionalConnections", reflect.TypeOf((*MockStorage)(nil).GetBidirectionalConnections), ctx, noteID)
}

// GetConnectionStats mocks base method.
func (m *MockStorage) GetConnectionStats(ctx context.Context) (*connection.ConnectionStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionStats", ctx)
	ret0, _ := ret[0].(*connection.ConnectionStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionStats indicates an expected call of GetConnectionStats.
func (mr *MockStorageMockRecorder) GetConnectionStats(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionStats", reflect.TypeOf((*MockStorage)(nil).GetConnectionStats), ctx)
}

// GetConnectionsByType mocks base method.
func (m *MockStorage) GetConnectionsByType(ctx context.Context, connectionType string, req connection.ListConnectionsRequest) (*connection.ListConnectionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionsByType", ctx, connectionType, req)
	ret0, _ := ret[0].(*connection.ListConnectionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionsByType indicates an expected call of GetConnectionsByType.
func (mr *MockStorageMockRecorder) GetConnectionsByType(ctx, connectionType, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionsByType", reflect.TypeOf((*MockStorage)(nil).GetConnectionsByType), ctx, connectionType, req)
}

// GetNoteConnections mocks base method.
func (m *MockStorage) GetNoteConnections(ctx context.Context, req connection.NoteConnectionsRequest) (*connection.NoteConnectionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoteConnections", ctx, req)
	ret0, _ := ret[0].(*connection.NoteConnectionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNoteConnections indicates an expected call of GetNoteConnections.
func (mr *MockStorageMockRecorder) GetNoteConnections(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoteConnections", reflect.TypeOf((*MockStorage)(nil).GetNoteConnections), ctx, req)
}

// List mocks base method.
func (m *MockStorage) List(ctx context.Context, req connection.ListConnectionsRequest) (*connection.ListConnectionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, req)
	ret0, _ := ret[0].(*connection.ListConnectionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockStorageMockRecorder) List(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStorage)(nil).List), ctx, req)
}

// Update mocks base method.
func (m *MockStorage) Update(ctx context.Context, id int64, req connection.UpdateConnectionRequest) (*connection.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, req)
	ret0, _ := ret[0].(*connection.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockStorageMockRecorder) Update(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStorage)(nil).Update), ctx, id, req)
}
